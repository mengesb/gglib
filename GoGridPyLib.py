from __future__ import print_function

try:
    import logging, md5, re, requests, time
except ImportError:
    print("Failure to load required modules: logging, md5, re, requests, time")
    quit()

logging.basicConfig(format="%(levelname)-6s: %(message)s")

class client():
    """Simple GoGrid API client"""
    opt_params               = {
    'num_items'              : None,
    'page'                   : None,
    'datacenter'             : []
    }

    api_server               = ''
    api_key                  = ''
    key_secret               = ''
    api_format               = ''
    api_version              = ''
    ssl_verify               = ''

    def __init__(self, api_key, key_secret, api_format='json', api_version='1.9', api_server='https://api.gogrid.com/api', ssl_verify=True):
        logging.info('Function Enter: client.__init__()')
        if api_server:
            logging.info("Updating self.api_server  = '%s'" % str(api_server))
            self.api_server  = api_server
        if api_key:
            logging.info("Updating self.api_key     = '%s'" % str(api_key))
            self.api_key     = api_key
        if key_secret:
            logging.info("Updating self.key_secret  = '%s'" % str('[REDACTED]'))
            self.key_secret  = key_secret
        if api_format:
            logging.info("Updating self.api_format  = '%s'" % str(api_format))
            self.api_format  = api_format
        if api_version:
            logging.info("Updating self.api_version = '%s'" % str(api_version))
            self.api_version = api_version
        if ssl_verify:
            logging.info("Updating self.ssl_verify  = '%s'" % ssl_verify)
            self.ssl_verify  = ssl_verify

        """API Parameters

        Required
            - api_key        : An API Key generated by GoGrid
                               Valid values: regex(^[a-f0-9]{16}$)
                               Type: string
            - format         : The output format of the response.
                               Valid values: ['json','xml','csv']
                               Default value: 'json'
                               Type: string
            - v              : The version of the API
                               Valid values: regex(^1.[0-9]{1}$)
                               Type: string
            - sig            : An MD5 Signature that signs each and every API request.
                               Generated via getSignature()
                               Valid values: regex(^[a-f0-9]{32}$)
                               Type: string
                               Note: time() within 10m of correct NTP time for timezone
        Optional
            - num_items      : The number of items to return.
                               Valid values: regex(^[0-9]+$)
                               Default value: 100 for all LIST methods
                               Type: int
            - page           : The page index to return for paginated results.
                               This parameter is ignored if num_items is not specified.
                               Valid values: regex(^[0-9]+$)
                               Type: int
            - datacenter     : The data center to filter on
                               Valid values: commonlookuplist() with 'lookup' set to 'datacenter'
                               Type: array of strings
        """
        self.params          = {
        'api_key'            : self.api_key,
        'format'             : self.api_format,
        'v'                  : self.api_version,
        }

        self.params.update(self.opt_params)
        logging.info("self.params: %s" % self.params)
        logging.info('Function Exit : client.__init__()')

    def debug(self):
        """Debug message function"""
        logging.info('-----DEBUG MESSAGE-----')
        logging.info("self.api_server : %s" % str(self.api_server))
        logging.info("self.api_key    : %s" % str(self.api_key))
        logging.info("self.key_secret : %s" % str('[REDACTED]')) # str(self.key_secret)
        logging.info("self.api_format : %s" % str(self.api_format))
        logging.info("self.api_version: %s" % str(self.api_version))
        logging.info("self.ssl_verify : %s" % str(self.ssl_verify))
        logging.info("self.params     : %s" % self.params)
        logging.info('-----DEBUG MESSAGE-----')

    def validAPIKey(self):
        """Validate an API key

        API keys are 16 characters in length, and only contain [a-f] and [0-9]
        API key secrets, however, have no limitations

        """
        logging.info('Function Enter: validAPIKey')
        i_valid              = False
        v_len                = False
        v_chars              = False

        if len(self.api_key) == 16:
            v_len            = True

        if re.match('^[a-f0-9]$', self.api_key):
            v_chars          = True
        logging.info("v_chars= %s" % v_chars)

        if v_len and v_chars:
            i_valid          = True
        logging.info("i_valid= %s" % i_valid)

        logging.info("Valid API key (%s)? %s" % (self.api_key, i_valid))
        logging.info('Function Exit : validAPIKey')
        return i_valid

    def getSignature(self, key, secret):
        """Create signature from md5 of key + secret + time"""
        logging.info('Function Enter: getSignature')
        m = md5.new(key+secret+str(int(time.time())))
        logging.info("m.hexdigest() = %s" % m.hexdigest())
        logging.info('Function Exit : getSignature')
        return m.hexdigest()

    def getRequestURL(self,          method, params={}):
        """Constructs a GET call url from a given method with params

        1. Generate the base URL based on the api_server and method
        2. Copy class global params locally
        3. Update with local function provided params
        4. Add 'sig' based on getSignature()
        5. return URL and local params

        """
        logging.info('Function Enter: getRequestURL')
        logging.info("method : %s" % method)
        gURL                 = self.api_server + '/' + method + '?'
        c_params             = self.params.copy()

        logging.info(c_params)

        # Remove unused optional parameters
        if not c_params['num_items']:
            del c_params['num_items']
        if not c_params['page']:
            del c_params['page']
        if not c_params['datacenter']:
            del c_params['datacenter']

        c_params.update(params)
        c_params['sig']      = self.getSignature(c_params['api_key'], self.key_secret)
        logging.info('Function Exit : getRequestURL')
        return gURL, c_params

    def sendAPIRequest(self,         method, params={}):
        """Send a request and return response

        1. Initialize dictionary resp
        2. Generate request URL via getRequestURL
        3. Create requests object 'r' using requests.get with URL, params, and ssl_verify
        4. Save 'text', 'status_code' from requests object r
        5. Generate response message text via httpMSG using status_code
        6. If there's a valid JSON response, save num_items
        7. Return dictionary resp
        """
        logging.info('Function Enter: sendAPIRequest')
        resp                 = {}
        logging.info("method : %s" % method)
        (url,payload)        = self.getRequestURL(method,params)

        logging.info("params : %s" % params)
        logging.info("url    : %s" % url)
        logging.info("payload: %s" % payload)
        r                    = requests.get(url, params=payload, verify=self.ssl_verify)

        resp['text']         = r.text
        resp['code']         = r.status_code
        resp['cmsg']         = self.httpMSG(r.status_code)
        try:
            resp['json']     = r.json()
        except:
            resp['json']     = None

        logging.info("resp   : %s" % resp)
        logging.info('Function Exit : sendAPIRequest')
        return resp

    #
    # GoGrid API version 1.9 calls
    #

    def commonlookuplist(self,       params={}):
        """https://wiki.gogrid.com/index.php/API:common.lookup.list

        RBAC: Super User, System User, Billing User, Read Only User

        Required
            - lookup         : The lookup to be listed.
                               To find all 'lookups' set to lookups
                               Type: int or string
        Optional
            - sort           : Sort based on the option
                               Valid values: ['id','name','description']
                               Type: string
            - asc            : Sort acending or decending.
                               This parameter is ignored if 'sort' is not specified.
                               Valid values: ['asc', 'true', '1', 'desc', 'false', '0']
                               Type: string
                               Default: true
        """
        logging.info('Function Enter: commonlookuplist')
        method               = 'common/lookup/list'
        r                    = {}
        l_params             = {
        'lookup'             : None,
        'sort'               : None,
        'asc'                : None,
        }

        l_params.update(params)

        if not l_params['lookup']:
            logging.error("commonlookuplist key 'lookup' required")

        # Remove unused optional parameters
        if not l_params['sort']:
            logging.info("unused key 'sort', deleting")
            del l_params['sort']
        if not l_params['asc']:
            logging.info("unused key 'asc', deleting")
            del l_params['asc']

        logging.info("method : %s" % method)
        logging.info("l_params %s" % l_params)
        r = self.sendAPIRequest(method,l_params)

        logging.info('Function Exit : commonlookuplist')
        return r

    def gridimagedelete(self,        params={}):
        """https://wiki.gogrid.com/index.php/API:grid.image.delete

        RBAC: Super User, System User

        Required (ONLY ONE of the following)
            - id             : The ID of the image to delete.
                               Valid values: regex(^[0-9]+$)
                               Type: string
            - name           : The name of the image to delete.
                               Valid values: regex(^GSI-[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{8}$)
                               Type: string
            - image          : The ID or name of the image to delete.
                               Type: string
        """
        logging.info('Function Enter: gridimagedelete')
        method               = 'grid/image/delete'
        r                    = {}
        l_params             = {
        'id'                 : None,
        'name'               : None,
        'image'              : None,
        }

        l_params.update(params)

        # Required ONLY one ['id','name','image']
        if l_params['id']:
            logging.info("key 'id' provided; deleting 'name' and 'image'")
            del l_params['name']
            del l_params['image']
        elif l_params['name']:
            logging.info("key 'name' provided; deleting 'id' and 'image'")
            del l_params['id']
            del l_params['image']
        elif l_params['image']:
            logging.info("key 'image' provided; deleting 'id' and 'name'")
            del l_params['id']
            del l_params['name']
        else:
            logging.error("gridimagedelete key 'id', 'name' or 'image' required")

        logging.info("method : %s" % method)
        logging.info("l_params %s" % l_params)
        r = self.sendAPIRequest(method,l_params)

        logging.info("r      : %s" % r)
        logging.info('Function Exit : gridimagedelete')
        return r

    def gridimageedit(self,          params={}):
        """https://wiki.gogrid.com/index.php/API:grid.image.edit

        RBAC: Super User, System User

        Required (ONLY ONE of the following)
            - id             : The ID of the image to edit.
                               Valid values: regex(^[0-9]+$)
                               Type: string
            - name           : The name of the image to edit.
                               Valid values: regex(^GSI-[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{8}$)
                               Type: string
            - image          : The ID or name of the image to edit.
                               Type: string
        Optional
            - friendlyName   : The edited friendly name of the image.
                               Type: string
            - description    : The edited descriptive text to describe this image.
                               Type: string
            - isPublic       : Will the image will be visible to the entire GoGrid community?
                               Type: boolean
            - image.minram   : Set the minimum ram value.
                               Valid values: commonlookuplist() with 'lookup' set to 'image.minram'
                               Type: string
            - image.type     : The ID or name of the server type.
                               Valid values: commonlookuplist() with 'lookup' set to 'image.type'
                               Type: string
        """
        logging.info('Function Enter: gridimageedit')
        method               = 'grid/image/edit'
        r                    = {}
        l_params             = {
        'id'                 : None,
        'name'               : None,
        'image'              : None,
        'friendlyName'       : None,
        'description'        : None,
        'isPublic'           : None,
        'image.minram'       : None,
        'image.type'         : None
        }

        l_params.update(params)

        # Required ONLY one ['id','name','image']
        if l_params['id']:
            logging.info("key 'id' provided; deleting 'name' and 'image'")
            del l_params['name']
            del l_params['image']
        elif l_params['name']:
            logging.info("key 'name' provided; deleting 'id' and 'image'")
            del l_params['id']
            del l_params['image']
        elif l_params['image']:
            logging.info("key 'image' provided; deleting 'id' and 'name'")
            del l_params['id']
            del l_params['name']
        else:
            logging.error("gridimageedit key 'id', 'name', or 'image' required")

        # Remove unused optional parameters
        if not l_params['friendlyName']:
            logging.info("key 'friendlyName' unused; deleting")
            del l_params['friendlyName']
        if not l_params['description']:
            logging.info("key 'description' unused; deleting")
            del l_params['description']
        if not l_params['isPublic']:
            logging.info("key 'isPublic' unused; deleting")
            del l_params['isPublic']
        if not l_params['image.minram']:
            logging.info("key 'image.minram' unused; deleting")
            del l_params['image.minram']
        if not l_params['image.type']:
            logging.info("key 'image.type' unused; deleting")
            del l_params['image.type']

        logging.info("method : %s" % method)
        logging.info("l_params %s" % l_params)
        r = self.sendAPIRequest(method,l_params)

        logging.info("r      : %s" % r)
        logging.info('Function Exit : gridimageedit')
        return r

    def gridimageget(self,           params={}):
        """https://wiki.gogrid.com/index.php/API:grid.image.get

        RBAC: Super User, System User, Billing User, Read Only User

        Required (ONLY ONE of the following)
            - id n           : The ID(s) of the image to get.
                               Valid values: regex(^[0-9]+$)
                               Type: array of strings
            - name n         : The name(s) of the image to get.
                               Valid values: regex(^GSI-[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{8}$)
                               Type: array of strings
            - image n        : The ID(s) or name(s) of the image to edit.
                               Type: array of strings
        """
        logging.info('Function Enter: gridimageget')
        method               = 'grid/image/get'
        r                    = {}
        l_params             = {
        'id'                 : [],
        'name'               : [],
        'image'              : [],
        }

        l_params.update(params)

        # Required ONLY one ['id','name','image']
        if l_params['id']:
            logging.info("key 'id' provided; deleting 'name' and 'image'")
            del l_params['name']
            del l_params['image']
        elif l_params['name']:
            logging.info("key 'name' provided; deleting 'id' and 'image'")
            del l_params['id']
            del l_params['image']
        elif l_params['image']:
            logging.info("key 'image' provided; deleting 'id' and 'name'")
            del l_params['id']
            del l_params['name']
        else:
            logging.error("gridimageedit key 'id', 'name', or 'image' required")

        logging.info("method : %s" % method)
        logging.info("l_params %s" % l_params)
        r = self.sendAPIRequest(method,l_params)

        logging.info("r      : %s" % r)
        logging.info('Function Exit : gridimageget')
        return r

    def gridimagelist(self,          params={}):
        """https://wiki.gogrid.com/index.php/API:grid.image.list

        RBAC: Super User, System User, Billing User, Read Only User

        Optional
            - isPublic       : Is the image visible to the entire GoGrid community?
                               Type: boolean
            - image.type     : The ID or name of the server type.
                               Valid values: commonlookuplist() with 'lookup' set to 'image.type'
                               Default value: The default is empty, therefore all are included
                               Type: string
            - image.state    : The current state of the image.
                               Valid values: commonlookuplist() with 'lookup' set to 'image.state'
                               Type: string
        """
        logging.info('Function Enter: gridimagelist')
        method               = 'grid/image/list'
        r                    = {}
        l_params             = {
        'isPublic'           : None,
        'image.type'         : None,
        'image.state'        : None,
        }

        l_params.update(params)

        # Remove unused optional parameters
        if not l_params['isPublic']:
            logging.info("key 'isPublic' unused; deleting")
            del l_params['isPublic']
        if not l_params['image.type']:
            logging.info("key 'image.type' unused; deleting")
            del l_params['image.type']
        if not l_params['image.state']:
            logging.info("key 'image.state' unused; deleting")
            del l_params['image.state']

        logging.info("method : %s" % method)
        logging.info("l_params %s" % l_params)
        r = self.sendAPIRequest(method,l_params)

        logging.info("r      : %s" % r)
        logging.info('Function Exit : gridimagelist')
        return r

    def gridimagerestore(self,       params={}):
        """https://wiki.gogrid.com/index.php/API:grid.image.restore

        RBAC: Super User, System User

        Required (ONLY ONE of the following)
            - id             : The ID(s) of the image to get.
                               Valid values: regex(^[0-9]+$)
                               Type: array
            - name           : The name(s) of the image to get.
                               Valid values: regex(^GSI-[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{8}$)
                               Type: array
            - image          : The ID(s) or name(s) of the image to edit.
                               Type: array
        """
        logging.info('Function Enter: gridimagerestore')
        method               = 'grid/image/restore'
        r                    = {}
        l_params             = {
        'id'                 : None,
        'name'               : None,
        'image'              : None,
        }

        l_params.update(params)

        # Required ONLY one ['id','name','image']
        if l_params['id']:
            logging.info("key 'id' provided; deleting 'name' and 'image'")
            del l_params['name']
            del l_params['image']
        elif l_params['name']:
            logging.info("key 'name' provided; deleting 'id' and 'image'")
            del l_params['id']
            del l_params['image']
        elif l_params['image']:
            logging.info("key 'image' provided; deleting 'id' and 'name'")
            del l_params['id']
            del l_params['name']
        else:
            logging.error("gridimagerestore key 'id', 'name', or 'image' required")

        logging.info("method : %s" % method)
        logging.info("l_params %s" % l_params)
        r = self.sendAPIRequest(method,l_params)

        logging.info("r      : %s" % r)
        logging.info('Function Exit : gridimagerestore')
        return r

    def gridimagesave(self,          params={}):
        """https://wiki.gogrid.com/index.php/API:grid.image.restore

        RBAC: Super User, System User

        Required
            - friendlyName   : The friendly name of the image to be saved.
                               Type: string
            - server         : The ID or name of the server to save.
                               Type: string
        Optional
            - description    : Descriptive text to describe this image.
                               Type: string
            - image.type     : The ID or name of the server type.
                               Valid values: commonlookuplist() with 'lookup' set to 'image.type'
                               Default value: 1
                               Type: string
        """
        logging.info('Function Enter: gridimagesave')
        method               = 'grid/image/save'
        r                    = {}
        l_params             = {
        'friendlyName'       : None,
        'server'             : None,
        'description'        : None,
        'image.type'         : None,
        }

        l_params.update(params)

        # Required
        if not l_params['friendlyName']:
            logging.error("gridimagesave key 'friendlyName' required")
        if not l_params['server']:
            logging.info("gridimagesave key 'server' required")

        # Remove unused optional parameters
        if not l_params['description']:
            logging.info("key 'description' unused; deleting")
            del l_params['description']
        if not l_params['image.type']:
            logging.info("key 'image.type' unused; deleting")
            del l_params['image.type']

        logging.info("method : %s" % method)
        logging.info("l_params %s" % l_params)
        r = self.sendAPIRequest(method,l_params)

        logging.info("r      : %s" % r)
        logging.info('Function Exit : gridimagesave')
        return r

    def gridiplist(self,             params={}):
        """https://wiki.gogrid.com/index.php/API:grid.ip.list

        RBAC: Super User, System User, Billing User, Read Only User

        Optional
            - ip.state       : The state to filter on.
                               Valid values: commonlookuplist() with 'lookup' set to 'ip.stage'
                               Default value: The default is empty, therefore all are included
                               Type: string
            - ip.type        : The type to filter on.
                               Valid values: commonlookuplist() with 'lookup' set to 'ip.type'
                               Default value: The default is empty, therefore all are included
                               Type: string
        """
        logging.info('Function Enter: gridiplist')
        method               = 'grid/ip/list'
        r                    = {}
        l_params             = {
        'ip.state'           : None,
        'ip.type'            : None,
        }

        l_params.update(params)

        # Remove unused optional parameters
        if not l_params['ip.state']:
            logging.info("key 'ip.state' unused; deleting")
            del l_params['ip.state']
        if not l_params['ip.type']:
            logging.info("key 'ip.type' unused; deleting")
            del l_params['ip.type']

        logging.info("method : %s" % method)
        logging.info("l_params %s" % l_params)
        r = self.sendAPIRequest(method,l_params)

        logging.info("r      : %s" % r)
        logging.info('Function Exit : gridiplist')
        return r

    def gridjobget(self,             params={}):
        """https://wiki.gogrid.com/index.php/API:grid.ip.list

        RBAC: Super User, System User

        Required (ONLY ONE of the following)
            - id n           : The ID(s) of the job(s) to retrieve
                               Type: array of strings
            - job n          : The ID(s) of the job(s) to retrieve
                               Type: array of strings
        """
        logging.info('Function Enter: gridjobget')
        method               = 'grid/job/get'
        r                    = {}
        l_params             = {
        'id'                 : [],
        'job'                : [],
        }

        l_params.update(params)

        # Required ONLY one ['id','job']
        if l_params['id']:
            del l_params['job']
        elif l_params['job']:
            del l_params['id']
        else:
            logging.error("gridjobget key 'id' or 'job' required")

        logging.info("method : %s" % method)
        logging.info("l_params %s" % l_params)
        r = self.sendAPIRequest(method,l_params)

        logging.info("r      : %s" % r)
        logging.info('Function Exit : gridjobget')
        return r

    def gridjoblist(self,            params={}):
        """https://wiki.gogrid.com/index.php/API:grid.ip.list

        RBAC: Super User, System User, Billing User, Read Only User

        Optional
            - startdate      : The start date of the filtered date range
                               Default value: The default is the calculation representing four weeks ago
                               Type: datetime input (https://wiki.gogrid.com/index.php/API:Types#datetime_inputs)
            - enddate        : The end date of the filtered date range
                               Default value: The default is now
                               Type: datetime input (https://wiki.gogrid.com/index.php/API:Types#datetime_inputs)
            - job.objecttype : The object type to filter on.
                               Valid values: commonlookuplist() with 'lookup' set to 'job.objecttype'
                               Default value: The default is empty, therefore all are included
                               Type: array of strings
            - job.state      : The job state to filter on.
                               Valid values: commonlookuplist() with 'lookup' set to 'job.state'
                               Default value: Default value: The default is empty, therefore all are included
                               Type: array of strings
            - owner          : The owner to filter on.
                               Valid values: case insensitive full/partial matches against account users
                               Default value: The default is empty, therefore all are included
                               Type: array of strings
            - object         : The object name to filter on.
                               If this parameter is provided all other filter parameters will be ignored.
                               Valid values: 
                               Type: string
        """
        logging.info('Function Enter: gridjoblist')
        method               = 'grid/job/list'
        r                    = {}
        l_params             = {
        'startdate'          : None,
        'enddate'            : None,
        'job.objecttype'     : [],
        'job.state'          : [],
        'owner'              : [],
        'object'             : None,
        }

        l_params.update(params)

        # Remove unused optional parameters
        if not l_params['job.objecttype']:
            logging.info("key 'job.objecttype' unused; deleting")
            del l_params['job.objecttype']
        if not l_params['job.state']:
            logging.info("key 'job.state' unused; deleting")
            del l_params['job.state']
        if not l_params['owner']:
            logging.info("key 'owner' unused; deleting")
            del l_params['owner']

        # Exclusive option
        if l_params['object']:
            logging.info("key 'object' is exclusive")
            del l_params['startdate']
            logging.info("key 'startdate' deleted")
            del l_params['enddate']
            logging.info("key 'enddate' deleted")
            del l_params['job.objecttype']
            logging.info("key 'job.objecttype' deleted")
            del l_params['job.state']
            logging.info("key 'job.state' deleted")
            del l_params['owner']
            logging.info("key 'owner' deleted")
        else:
            logging.info("key 'object' unused; deleting")
            del l_params['object']

        logging.info("method : %s" % method)
        logging.info("l_params %s" % l_params)
        r = self.sendAPIRequest(method,l_params)

        logging.info("r      : %s" % r)
        logging.info('Function Exit : gridjoblist')
        return r

    def gridloadbalanceradd(self,    params={}):
        """https://wiki.gogrid.com/index.php/API:grid.loadbalancer.add

        RBAC: Super User, System User

        Required
            - name           : The name of this load balancer. There is a 20 character limit on this field.
                               Valid values: regex(^[a-zA-Z0-9\ ]{20}$)
                               Type: string
            - virtual.ip     : The IPv4 of the virtual IP address for this load balancer. This must be a publicly available IP address.
                               Valid values: regex((?:[0-9]{1,3}\.){3}[0-9]{1,3})
                               Type: string
            - virtual.port   : The port associated with the value of the virtualip.ip that constitutes the virtual IP port pair.
                               Valid values: 1-65535
                               Type: int
            - realiplist.n.ip: The IP address for an IP/port pair in the real IP list for this load balancer.
                               n is the index of the element and should start with 0 or 1.
                               Valid values: regex((?:[0-9]{1,3}\.){3}[0-9]{1,3})
                               Type: string
            - realiplist.n.port: The port associated with the matching value of realiplist.n.ip
                               n is the index of the element and should start with 0 or 1.
                               Valid values: 1-65535
                               Type: int
        Optional
            - loadbalancer.type: The load balancer type of this load balancer.
                               Valid values: commonlookuplist() with 'lookup' set to 'loadbalancer.type'
                               Default value: round robin
                               Type: string
            - loadbalancer.persistence: The persistence type of this load balancer.
                               Valid values: commonlookuplist() with 'lookup' set to 'loadbalancer.persistence'
                               Default value: None
                               Type: string
        """
        logging.info('Function Enter: gridloadbalanceradd')
        method               = 'grid/loadbalancer/add'
        r                    = {}
        l_params             = {
        'name'               : None,
        'virtualip.ip'       : None,
        'virtualip.port'     : None,
        'loadbalancer.type'  : None,
        'loadbalancer.persistence': None,
        }

        l_params.update(params)

        # Required
        if not l_params['name']:
            logging.error("gridloadbalanceradd key 'name' required")
        if not l_params['virtualip.ip']:
            logging.error("gridloadbalanceradd key 'virtualip.ip' required")
        if not l_params['virtualip.port']:
            logging.error("gridloadbalanceradd key 'virtualip.port' required")

        #WARN  : realiplist.n.(ip|port)
        # Per documentation, minimum 0 index ip/port pairs required on realiplist.n.(ip|port)
        # If the user doesn't provide a paired key, value set, the API will return HTTP 400
        if not l_params.get('realiplist.0.ip'):
            logging.error("gridloadbalanceradd key 'realiplist.0.ip' required")
        if not l_params.get('realiplist.0.port'):
            logging.error("gridloadbalanceradd key 'realiplist.0.port' required")

        # Remove unused optional parameters
        if not l_params['description']:
            logging.info("key 'description' unused; deleting")
            del l_params['description']
        if not l_params['loadbalancer.type']:
            logging.info("key 'loadbalancer.type' unused; deleting")
            del l_params['loadbalancer.type']
        if not l_params['loadbalancer.persistence']:
            logging.info("key 'loadbalancer.persistence' unused; deleting")
            del l_params['loadbalancer.persistence']

        logging.info("method : %s" % method)
        logging.info("l_params %s" % l_params)
        r = self.sendAPIRequest(method,l_params)

        logging.info("r      : %s" % r)
        logging.info('Function Exit : gridloadbalanceradd')
        return r

    def gridloadbalancerdelete(self, params={}):
        """https://wiki.gogrid.com/index.php/API:grid.loadbalancer.delete

        RBAC: Super User, System User

        Required (ONLY ONE of the following)
            - id             : The ID(s) of the loadbalancer to delete.
                               Valid values: regex(^[0-9]+$)
                               Type: string
            - name           : The name(s) of the loadbalancer to delete.
                               Valid values: regex(^[a-zA-Z][a-zA-Z0-9\ ]{,19}$)
                               Type: string
            - loadbalancer   : The ID(s) or name(s) of the loadbalancer to delete.
                               Valid values: regex(^([0-9]+|[a-zA-Z][a-zA-Z0-9\ ]{,19})$)
                               Type: string
        """
        logging.info('Function Enter: gridloadbalancerdelete')
        method               = 'grid/loadbalancer/delete'
        r                    = {}
        l_params             = {
        'id'                 : None,
        'name'               : None,
        'loadbalancer'       : None,
        }

        l_params.update(params)

        # Required ONLY one ['id','name','loadbalancer']
        if l_params['id']:
            logging.info("key 'id' provided; deleting 'name' and 'loadbalancer'")
            del l_params['name']
            del l_params['loadbalancer']
        elif l_params['name']:
            logging.info("key 'name' provided; deleting 'id' and 'loadbalancer'")
            del l_params['id']
            del l_params['loadbalancer']
        elif l_params['loadbalancer']:
            logging.info("key 'loadbalancer' provided; deleting 'id' and 'name'")
            del l_params['id']
            del l_params['name']
        else:
            logging.info("gridloadbalancerdelete key 'id', 'name', or 'loadbalancer' required")

        logging.info("method : %s" % method)
        logging.info("l_params %s" % l_params)
        r = self.sendAPIRequest(method,l_params)

        logging.info("r      : %s" % r)
        logging.info('Function Exit : gridloadbalancerdelete')
        return r

    def gridloadbalanceredit(self,   params={}):
        """https://wiki.gogrid.com/index.php/API:grid.loadbalancer.edit

        RBAC: Super User, System User

        Required (ONLY ONE of the following)
            - id             : The ID of the load balancer to edit
                               Valid values: regex(^[0-9]+$)
                               Type: string
            - name           : The name of this load balancer to edit.
                               Valid values: regex(^[a-zA-Z][a-zA-Z0-9\ ]{,19}$)
                               Type: string
            - loadbalancer   : The ID or name of the load balancer to edit.
                               Valid values: regex(^([0-9]+|[a-zA-Z][a-zA-Z0-9\ ]{,19})$)
                               Type: string
        Required
            - realiplist.n.ip: The IP address for an IP/port pair in the real IP list for this load balancer.
                               n is the index of the element and should start with 0 or 1.
                               Valid values: (?:[0-9]{1,3}\.){3}[0-9]{1,3}
                               Type: string
            - realiplist.n.port: The port associated with the matching value of realiplist.n.ip
                               n is the index of the element and should start with 0 or 1.
                               Valid values: 1-65535
                               Type: int
        """
        logging.info('Function Enter: gridloadbalanceredit')
        method               = 'grid/loadbalancer/edit'
        r                    = {}
        l_params             = {
        'id'                 : None,
        'name'               : None,
        'loadbalancer'       : None,
        }

        l_params.update(params)

        # Required ONLY one ['id','name', 'loadbalancer']
        if l_params['id']:
            logging.info("key 'id' provided; deleting 'name' and 'loadbalancer'")
            del l_params['name']
            del l_params['loadbalancer']
        if l_params['name']:
            logging.info("key 'name' provided; deleting 'id' and 'loadbalancer'")
            del l_params['id']
            del l_params['loadbalancer']
        if l_params['loadbalancer']:
            logging.info("key 'loadbalancer' provided; deleting 'id' and 'name'")
            del l_params['id']
            del l_params['name']

        # Required
        #WARN  : realiplist.n.(ip|port)
        # Per documentation, minimum 0 index ip/port pairs required on realiplist.n.(ip|port)
        # If the user doesn't provide a paired key, value set, the API will return HTTP 400
        if not l_params.get('realiplist.0.ip'):
            logging.error("gridloadbalanceredit key 'realiplist.0.ip' required")
        if not l_params.get('realiplist.0.port'):
            logging.error("gridloadbalanceredit key 'realiplist.0.port' required")

        logging.info("method : %s" % method)
        logging.info("l_params %s" % l_params)
        r = self.sendAPIRequest(method,l_params)

        logging.info("r      : %s" % r)
        logging.info('Function Exit : gridloadbalanceredit')
        return r

    def gridloadbalancerget(self,    params={}):
        """https://wiki.gogrid.com/index.php/API:grid.loadbalancer.get

        RBAC: Super User, System User, Billing User, Read Only User

        Required (ONLY ONE of the following)
            - id n           : The ID(s) of the load balancer(s) to get
                               Valid values: regex(^[0-9]+$)
                               Type: array of strings
            - name n         : The name(s) of this load balancer(s) to get.
                               Valid values: regex(^[a-zA-Z][a-zA-Z0-9\ ]{,19}$)
                               Type: array of strings
            - loadbalancer n : The ID(s) or name(s) of the load balancer(s) to get.
                               Valid values: regex(^([0-9]+|[a-zA-Z][a-zA-Z0-9\ ]{,19})$)
                               Type: array of strings
        """
        logging.info('Function Enter: ')
        method               = 'grid/loadbalancer/get'
        r                    = {}
        l_params             = {
        'id'                 : [],
        'name'               : [],
        'loadbalancer'       : [],
        }

        l_params.update(params)

        # Required ONLY one ['id','name', 'loadbalancer']
        if l_params['id']:
            logging.info("key 'id' provided; deleting 'name' and 'loadbalancer'")
            del l_params['name']
            del l_params['loadbalancer']
        elif l_params['name']:
            logging.info("key 'name' provided; deleting 'id' and 'loadbalancer'")
            del l_params['id']
            del l_params['loadbalancer']
        elif l_params['loadbalancer']:
            logging.info("key 'loadbalancer' provided; deleting 'id' and 'name'")
            del l_params['id']
            del l_params['name']
        else:
            logging.info("gridloadbalancerget key 'id', 'name', or 'loadbalancer' required")            

        logging.info("method : %s" % method)
        logging.info("l_params %s" % l_params)
        r = self.sendAPIRequest(method,l_params)

        logging.info("r      : %s" % r)
        logging.info('Function Exit : ')
        return r

    def gridloadbalancerlist(self,   params={}):
        """https://wiki.gogrid.com/index.php/API:grid.loadbalancer.list

        RBAC: Super User, System User, Billing User, Read Only User

        Required
            - None
        Optional
            - None
        """
        logging.info('Function Enter: gridloadbalancerlist')
        method               = 'grid/loadbalancer/list'
        r                    = {}
        l_params             = {} # None

        l_params.update(params)

        # Required
        # None

        # Remove unused optional parameters
        # None

        logging.info("method : %s" % method)
        logging.info("l_params %s" % l_params)
        r = self.sendAPIRequest(method,l_params)

        logging.info("r      : %s" % r)
        logging.info('Function Exit : gridloadbalancerlist')
        return r

    def gridserveradd(self,          params={}):
        """https://wiki.gogrid.com/index.php/API:grid.server.add

        RBAC: Super User, System User

        Required
            - name           : The friendly name of this server.
                               There is a 20-character limit on this field.
                               Valid values: regex(^[a-zA-Z][a-zA-Z0-9\ ]{,19}$)
                               Type: string
            - image          : The server image name or ID.
                               Valid values: regex(^$)
                               Type: string
            - server.ram     : The friendly name of this server.
                               Valid values: Valid values: commonlookuplist() with 'lookup' set to 'server.ram'
                               Type: string
            - ip             : The initial public IP address for this server.
                               There is a 20-character limit on this field.
                               Valid values: regex((?:[0-9]{1,3}\.){3}[0-9]{1,3})
                               Type: string
        Optional
            - privateip      : The initial private IP address for this server.
                               Feature must be enabled in target datacenter.
                               Valid values: regex((?:[0-9]{1,3}\.){3}[0-9]{1,3}) RFC1918
                               Default value: next available private IP
                               Type: string
            - description    : Descriptive text to describe this server.
                               Type: string
        """
        logging.info('Function Enter: gridserveradd')
        method               = 'grid/server/add'
        r                    = {}
        l_params             = {
        'name'               : None,
        'image'              : None,
        'server.ram'         : None,
        'ip'                 : None,
        'privateip'          : None,
        'description'        : None,
        }

        l_params.update(params)

        # Required
        if not l_params.get('name'):
            logging.error("gridserveradd key 'name' required")
        if not l_params.get('image'):
            logging.error("gridserveradd key 'image' required")
        if not l_params.get('server.ram'):
            logging.error("gridserveradd key 'server.ram' required")
        if not l_params.get('ip'):
            logging.error("gridserveradd key 'ip' required")

        # Remove unused optional parameters
        if not l_params.get('privateip'):
            logging.error("key 'privateip' unused; deleting")
            del l_params['privateip']
        if not l_params.get('description'):
            logging.error("key 'description' unused; deleting")
            del l_params['description']

        logging.info("method : %s" % method)
        logging.info("l_params %s" % l_params)
        r = self.sendAPIRequest(method,l_params)

        logging.info("r      : %s" % r)
        logging.info('Function Exit : gridserveradd')
        return r

    def gridserverdelete(self,       params={}):
        """https://wiki.gogrid.com/index.php/API:grid.server.delete

        RBAC: Super User, System User

        Required (ONLY ONE of the following)
            - id             : The ID of the server to delete.
                               Valid values: regex(^[0-9]+$)
                               Type: string
            - name           : The name of the server to delete.
                               Valid values: regex(^[a-zA-Z][a-zA-Z0-9\ ]{,19}$)
                               Type: string
            - server         : The ID or name of the server to delete.
                               Type: string
        """
        logging.info('Function Enter: gridserverdelete')
        method               = 'grid/server/delete'
        r                    = {}
        l_params             = {
        'id'                 : None,
        'name'               : None,
        'server'             : None,
        }

        l_params.update(params)

        # Required ONLY one ['id','name','server']
        if l_params['id']:
            logging.info("key 'id' provided; deleting 'name' and 'server'")
            del l_params['name']
            del l_params['server']
        elif l_params['name']:
            logging.info("key 'name' provided; deleting 'id' and 'server'")
            del l_params['id']
            del l_params['server']
        elif l_params['server']:
            logging.info("key 'image' provided; deleting 'id' and 'name'")
            del l_params['id']
            del l_params['name']
        else:
            logging.error("gridserverdelete key 'id', 'name' or 'server' required")

        logging.info("method : %s" % method)
        logging.info("l_params %s" % l_params)
        r = self.sendAPIRequest(method,l_params)

        logging.info("r      : %s" % r)
        logging.info('Function Exit : gridserverdelete')
        return r

    def gridserveredit(self,         params={}):
        """https://wiki.gogrid.com/index.php/API:grid.server.edit

        RBAC: Super User, System User

        Required (ONLY ONE of the following)
            - id n           : The ID(s) of the server(s) to edit.
                               Valid values: regex(^[0-9]+$)
                               Type: array of strings
            - name n         : The name(s) of the server(s) to delete.
                               Valid values: regex(^[a-zA-Z][a-zA-Z0-9\ ]{,19}$)
                               Type: array of strings
            - server n       : The ID(s) or name(s) of the server(s) to delete.
                               Type: string
        Optional
            - server.ram     : The ID or RAM value of this server.
                               Valid values: Valid values: commonlookuplist() with 'lookup' set to 'server.ram'
                               Type: string
            - server.type    : The ID or type of this server.
                               Valid values: Valid values: commonlookuplist() with 'lookup' set to 'server.type'
                               Type: string
            - description    : Descriptive text to describe this server.
                               Type: string
        """
        logging.info('Function Enter: gridserveredit')
        method               = 'grid/server/edit'
        r                    = {}
        l_params             = {
        'id'                 : [],
        'name'               : [],
        'server'             : [],
        'server.ram'         : None,
        'server.type'        : None,
        'description'        : None,
        }

        l_params.update(params)

        # Required ONLY one ['id','name','server']
        if l_params['id']:
            logging.info("key 'id' provided; deleting 'name' and 'server'")
            del l_params['name']
            del l_params['server']
        elif l_params['name']:
            logging.info("key 'name' provided; deleting 'id' and 'server'")
            del l_params['id']
            del l_params['server']
        elif l_params['server']:
            logging.info("key 'image' provided; deleting 'id' and 'name'")
            del l_params['id']
            del l_params['name']
        else:
            logging.error("gridserveredit key 'id', 'name' or 'server' required")

        # Remove unused optional parameters
        if not l_params.get('server.ram'):
            logging.error("key 'server.ram' unused; deleting")
            del l_params['server.ram']
        if not l_params.get('server.type'):
            logging.error("key 'server.type' unused; deleting")
            del l_params['server.type']
        if not l_params.get('description'):
            logging.error("key 'description' unused; deleting")
            del l_params['description']

        logging.info("method : %s" % method)
        logging.info("l_params %s" % l_params)
        r = self.sendAPIRequest(method,l_params)

        logging.info("r      : %s" % r)
        logging.info('Function Exit : gridserveredit')
        return r

    def gridserverget(self,          params={}):
        """https://wiki.gogrid.com/index.php/API:grid.server.get

        RBAC: Super User, System User, Billing User, Read Only User

        Required (ONLY ONE of the following)
            - id n           : The ID(s) of the server(s) to get.
                               Valid values: regex(^[0-9]+$)
                               Type: array of strings
            - name n         : The name(s) of the server(s) to get.
                               Valid values: regex(^[a-zA-Z][a-zA-Z0-9\ ]{,19}$)
                               Type: array of strings
            - server n       : The ID(s) or name(s) of the server(s) to get.
                               Type: string
        """
        logging.info('Function Enter: gridserverget')
        method               = 'grid/server/get'
        r                    = {}
        l_params             = {
        'id'                 : [],
        'name'               : [],
        'server'             : [],
        }

        l_params.update(params)

        # Required ONLY one ['id','name','server']
        if l_params['id']:
            logging.info("key 'id' provided; deleting 'name' and 'server'")
            del l_params['name']
            del l_params['server']
        elif l_params['name']:
            logging.info("key 'name' provided; deleting 'id' and 'server'")
            del l_params['id']
            del l_params['server']
        elif l_params['server']:
            logging.info("key 'image' provided; deleting 'id' and 'name'")
            del l_params['id']
            del l_params['name']
        else:
            logging.error("gridserverget key 'id', 'name' or 'server' required")

        logging.info("method : %s" % method)
        logging.info("l_params %s" % l_params)
        r = self.sendAPIRequest(method,l_params)

        logging.info("r      : %s" % r)
        logging.info('Function Exit : gridserverget')
        return r

    def gridserverlist(self,         params={}):
        """https://wiki.gogrid.com/index.php/API:grid.server.list

        RBAC: Super User, System User, Billing User, Read Only User

        Optional
            - server.type    : The ID or type of this server.
                               Valid values: Valid values: commonlookuplist() with 'lookup' set to 'server.type'
                               Type: string
        """
        logging.info('Function Enter: gridserverlist')
        method               = 'grid/server/list'
        r                    = {}
        l_params             = {
        'server.type'        : None,
        }

        l_params.update(params)

        # Remove unused optional parameters
        if not l_params.get('server.type'):
            logging.error("key 'server.type' unused; deleting")
            del l_params['server.type']

        logging.info("method : %s" % method)
        logging.info("l_params %s" % l_params)
        r = self.sendAPIRequest(method,l_params)

        logging.info("r      : %s" % r)
        logging.info('Function Exit : gridserverlist')
        return r

    def gridserverpower(self,        params={}):
        """https://wiki.gogrid.com/index.php/API:grid.server.

        RBAC: Super User, System User

        Required (ONLY ONE of the following)
            - id             : The ID of the server to issue the power command.
                               Valid values: regex(^[0-9]+$)
                               Type: string
            - name           : The name of the server to issue the power command.
                               Valid values: regex(^[a-zA-Z][a-zA-Z0-9\ ]{,19}$)
                               Type: string
            - server         : The ID or name of the server to issue the power command.
                               Type: string
        Required
            - power          : The power command to issue
                               Valid values: ['on','start','off','stop','cycle','restart']
                               Type: string
        """
        logging.info('Function Enter: gridserverpower')
        method               = 'grid/server/power'
        r                    = {}
        l_params             = {
        'id'                 : None,
        'name'               : None,
        'server'             : None,
        'power'              : None,
        }

        l_params.update(params)

        # Required ONLY one ['id','name','server']
        if l_params['id']:
            logging.info("key 'id' provided; deleting 'name' and 'server'")
            del l_params['name']
            del l_params['server']
        elif l_params['name']:
            logging.info("key 'name' provided; deleting 'id' and 'server'")
            del l_params['id']
            del l_params['server']
        elif l_params['server']:
            logging.info("key 'image' provided; deleting 'id' and 'name'")
            del l_params['id']
            del l_params['name']
        else:
            logging.error("gridserverdelete key 'id', 'name' or 'server' required")

        # Required
        if not l_params['power']:
            logging.error("gridserverdelete key 'power' required")

        logging.info("method : %s" % method)
        logging.info("l_params %s" % l_params)
        r = self.sendAPIRequest(method,l_params)

        logging.info("r      : %s" % r)
        logging.info('Function Exit : gridserverpower')
        return r

    def myaccountbillingget(self,    params={}):
        """https://wiki.gogrid.com/index.php/API:myaccount.billing.get

        RBAC: Super User, Billing User

        Required
            - None
        Optional
            - None
        """
        logging.info('Function Enter: myaccountbillingget')
        method               = 'myaccount/billing/get'
        r                    = {}
        l_params             = {} # None

        l_params.update(params)

        # Required
        # None

        # Remove unused optional parameters
        # None

        logging.info("method : %s" % method)
        logging.info("l_params %s" % l_params)
        r = self.sendAPIRequest(method,l_params)

        logging.info("r      : %s" % r)
        logging.info('Function Exit : myaccountbillingget')
        return r

    def supportpasswordget(self,     params={}):
        """https://wiki.gogrid.com/index.php/API:support.password.get

        RBAC: Super User, System User, Billing User, Read Only User

        Required (ONLY ONE of the following)
            - id             : The ID of the password to get.
                               Valid values: regex(^[0-9]+$)
                               Type: string
            - password       : The ID of the password to get.
                               Valid values: regex(^[a-zA-Z][a-zA-Z0-9\ ]{,19}$)
                               Type: string
        """
        logging.info('Function Enter: supportpasswordget')
        method               = 'support/password/get'
        r                    = {}
        l_params             = {
        'id'                 : None,
        'password'           : None,
        }

        l_params.update(params)

        # Required ONLY one ['id','password']
        if l_params['id']:
            logging.info("key 'id' provided; deleting 'password'")
            del l_params['password']
        elif l_params['password']:
            logging.info("key 'password' provided; deleting 'id'")
            del l_params['id']
        else:
            logging.error("supportpasswordget key 'id' or 'password' required")

        logging.info("method : %s" % method)
        logging.info("l_params %s" % l_params)
        r = self.sendAPIRequest(method,l_params)

        logging.info("r      : %s" % r)
        logging.info('Function Exit : supportpasswordget')
        return r

    def supportpasswordlist(self,    params={}):
        """https://wiki.gogrid.com/index.php/API:support.password.list

        RBAC: Super User, System User, Billing User, Read Only User

        Required
            - None
        Optional
            - None
        """
        logging.info('Function Enter: supportpasswordlist')
        method               = 'support/password/list'
        r                    = {}
        l_params             = {} # None

        l_params.update(params)

        # Required
        # None

        # Remove unused optional parameters
        # None

        logging.info("method : %s" % method)
        logging.info("l_params %s" % l_params)
        r = self.sendAPIRequest(method,l_params)

        logging.info("r      : %s" % r)
        logging.info('Function Exit : supportpasswordlist')
        return r

    def httpMSG(self, q):
        """Respond with human readable result from HTTP response code lookup"""
        return {
        100: 'Informational: Continue',
        101: 'Informational: Switching Protocols',
        200: 'Successful: OK',
        201: 'Successful: Created',
        202: 'Successful: Created',
        203: 'Successful: Non-Authoritative Information',
        204: 'Successful: No Content',
        205: 'Successful: Reset Content',
        206: 'Successful: Partial Content',
        300: 'Redirection: Multiple Choices',
        301: 'Redirection: Moved Permanently',
        302: 'Redirection: Found',
        303: 'Redirection: See Other',
        304: 'Redirection: Not Modified',
        305: 'Redirection: Use Proxy',
        306: 'Redirection: Unused',
        307: 'Redirection: Temporary Redirect',
        400: 'Client Error: Bad Request',
        401: 'Client Error: Unauthorized',
        402: 'Client Error: Payment Required',
        403: 'Client Error: Forbidden',
        404: 'Client Error: Not Found',
        405: 'Client Error: Method Not Allowed',
        406: 'Client Error: Not Acceptable',
        407: 'Client Error: Proxy Authentication Required',
        408: 'Client Error: Request Timeout',
        409: 'Client Error: Conflict',
        410: 'Client Error: Gone',
        411: 'Client Error: Length Required',
        412: 'Client Error: Precondition Failed',
        413: 'Client Error: Request Entity Too Large',
        414: 'Client Error: Request-URI Too Long',
        415: 'Client Error: Unsupported Media Type',
        416: 'Client Error: Requested Range Not Satisfiable',
        417: 'Client Error: Expectation Failed',
        500: 'Server Error: Internal Server Error',
        501: 'Server Error: Not Implemented',
        502: 'Server Error: Bad Gateway',
        503: 'Server Error: Service Unavailable',
        504: 'Server Error: Gateway Timeout',
        505: 'Server Error: HTTP Version Not Supported',
        }.get(q,"Unknown HTTP response code: '%d'" % q)
